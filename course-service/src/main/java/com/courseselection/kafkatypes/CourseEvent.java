/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.courseselection.kafkatypes;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CourseEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -215219039347966161L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CourseEvent\",\"namespace\":\"com.courseselection.kafkatypes\",\"fields\":[{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"course\",\"type\":{\"type\":\"record\",\"name\":\"Course\",\"fields\":[{\"name\":\"id\",\"type\":[\"int\",\"null\"]},{\"name\":\"name\",\"type\":[\"string\",\"null\"]},{\"name\":\"code\",\"type\":[\"string\",\"null\"]},{\"name\":\"professorId\",\"type\":[\"int\",\"null\"]},{\"name\":\"capacity\",\"type\":[\"int\",\"null\"]}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CourseEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CourseEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CourseEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CourseEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CourseEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CourseEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CourseEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CourseEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CourseEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence operation;
  private com.courseselection.kafkatypes.Course course;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CourseEvent() {}

  /**
   * All-args constructor.
   * @param operation The new value for operation
   * @param course The new value for course
   */
  public CourseEvent(java.lang.CharSequence operation, com.courseselection.kafkatypes.Course course) {
    this.operation = operation;
    this.course = course;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return operation;
    case 1: return course;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: operation = (java.lang.CharSequence)value$; break;
    case 1: course = (com.courseselection.kafkatypes.Course)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'operation' field.
   * @return The value of the 'operation' field.
   */
  public java.lang.CharSequence getOperation() {
    return operation;
  }


  /**
   * Sets the value of the 'operation' field.
   * @param value the value to set.
   */
  public void setOperation(java.lang.CharSequence value) {
    this.operation = value;
  }

  /**
   * Gets the value of the 'course' field.
   * @return The value of the 'course' field.
   */
  public com.courseselection.kafkatypes.Course getCourse() {
    return course;
  }


  /**
   * Sets the value of the 'course' field.
   * @param value the value to set.
   */
  public void setCourse(com.courseselection.kafkatypes.Course value) {
    this.course = value;
  }

  /**
   * Creates a new CourseEvent RecordBuilder.
   * @return A new CourseEvent RecordBuilder
   */
  public static com.courseselection.kafkatypes.CourseEvent.Builder newBuilder() {
    return new com.courseselection.kafkatypes.CourseEvent.Builder();
  }

  /**
   * Creates a new CourseEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CourseEvent RecordBuilder
   */
  public static com.courseselection.kafkatypes.CourseEvent.Builder newBuilder(com.courseselection.kafkatypes.CourseEvent.Builder other) {
    if (other == null) {
      return new com.courseselection.kafkatypes.CourseEvent.Builder();
    } else {
      return new com.courseselection.kafkatypes.CourseEvent.Builder(other);
    }
  }

  /**
   * Creates a new CourseEvent RecordBuilder by copying an existing CourseEvent instance.
   * @param other The existing instance to copy.
   * @return A new CourseEvent RecordBuilder
   */
  public static com.courseselection.kafkatypes.CourseEvent.Builder newBuilder(com.courseselection.kafkatypes.CourseEvent other) {
    if (other == null) {
      return new com.courseselection.kafkatypes.CourseEvent.Builder();
    } else {
      return new com.courseselection.kafkatypes.CourseEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for CourseEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CourseEvent>
    implements org.apache.avro.data.RecordBuilder<CourseEvent> {

    private java.lang.CharSequence operation;
    private com.courseselection.kafkatypes.Course course;
    private com.courseselection.kafkatypes.Course.Builder courseBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.courseselection.kafkatypes.CourseEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.operation)) {
        this.operation = data().deepCopy(fields()[0].schema(), other.operation);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.course)) {
        this.course = data().deepCopy(fields()[1].schema(), other.course);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasCourseBuilder()) {
        this.courseBuilder = com.courseselection.kafkatypes.Course.newBuilder(other.getCourseBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing CourseEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.courseselection.kafkatypes.CourseEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.operation)) {
        this.operation = data().deepCopy(fields()[0].schema(), other.operation);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.course)) {
        this.course = data().deepCopy(fields()[1].schema(), other.course);
        fieldSetFlags()[1] = true;
      }
      this.courseBuilder = null;
    }

    /**
      * Gets the value of the 'operation' field.
      * @return The value.
      */
    public java.lang.CharSequence getOperation() {
      return operation;
    }


    /**
      * Sets the value of the 'operation' field.
      * @param value The value of 'operation'.
      * @return This builder.
      */
    public com.courseselection.kafkatypes.CourseEvent.Builder setOperation(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.operation = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'operation' field has been set.
      * @return True if the 'operation' field has been set, false otherwise.
      */
    public boolean hasOperation() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'operation' field.
      * @return This builder.
      */
    public com.courseselection.kafkatypes.CourseEvent.Builder clearOperation() {
      operation = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'course' field.
      * @return The value.
      */
    public com.courseselection.kafkatypes.Course getCourse() {
      return course;
    }


    /**
      * Sets the value of the 'course' field.
      * @param value The value of 'course'.
      * @return This builder.
      */
    public com.courseselection.kafkatypes.CourseEvent.Builder setCourse(com.courseselection.kafkatypes.Course value) {
      validate(fields()[1], value);
      this.courseBuilder = null;
      this.course = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'course' field has been set.
      * @return True if the 'course' field has been set, false otherwise.
      */
    public boolean hasCourse() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'course' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.courseselection.kafkatypes.Course.Builder getCourseBuilder() {
      if (courseBuilder == null) {
        if (hasCourse()) {
          setCourseBuilder(com.courseselection.kafkatypes.Course.newBuilder(course));
        } else {
          setCourseBuilder(com.courseselection.kafkatypes.Course.newBuilder());
        }
      }
      return courseBuilder;
    }

    /**
     * Sets the Builder instance for the 'course' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.courseselection.kafkatypes.CourseEvent.Builder setCourseBuilder(com.courseselection.kafkatypes.Course.Builder value) {
      clearCourse();
      courseBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'course' field has an active Builder instance
     * @return True if the 'course' field has an active Builder instance
     */
    public boolean hasCourseBuilder() {
      return courseBuilder != null;
    }

    /**
      * Clears the value of the 'course' field.
      * @return This builder.
      */
    public com.courseselection.kafkatypes.CourseEvent.Builder clearCourse() {
      course = null;
      courseBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CourseEvent build() {
      try {
        CourseEvent record = new CourseEvent();
        record.operation = fieldSetFlags()[0] ? this.operation : (java.lang.CharSequence) defaultValue(fields()[0]);
        if (courseBuilder != null) {
          try {
            record.course = this.courseBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("course"));
            throw e;
          }
        } else {
          record.course = fieldSetFlags()[1] ? this.course : (com.courseselection.kafkatypes.Course) defaultValue(fields()[1]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CourseEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<CourseEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CourseEvent>
    READER$ = (org.apache.avro.io.DatumReader<CourseEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.operation);

    this.course.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.operation = in.readString(this.operation instanceof Utf8 ? (Utf8)this.operation : null);

      if (this.course == null) {
        this.course = new com.courseselection.kafkatypes.Course();
      }
      this.course.customDecode(in);

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.operation = in.readString(this.operation instanceof Utf8 ? (Utf8)this.operation : null);
          break;

        case 1:
          if (this.course == null) {
            this.course = new com.courseselection.kafkatypes.Course();
          }
          this.course.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










