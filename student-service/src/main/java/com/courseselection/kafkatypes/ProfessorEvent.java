/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.courseselection.kafkatypes;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ProfessorEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4843606084536976394L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ProfessorEvent\",\"namespace\":\"com.courseselection.kafkatypes\",\"fields\":[{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"professor\",\"type\":[{\"type\":\"record\",\"name\":\"Professor\",\"fields\":[{\"name\":\"id\",\"type\":[\"int\",\"null\"]},{\"name\":\"name\",\"type\":[\"string\",\"null\"]},{\"name\":\"email\",\"type\":[\"string\",\"null\"]}]},\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ProfessorEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ProfessorEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ProfessorEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ProfessorEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ProfessorEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ProfessorEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ProfessorEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ProfessorEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ProfessorEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence operation;
  private com.courseselection.kafkatypes.Professor professor;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ProfessorEvent() {}

  /**
   * All-args constructor.
   * @param operation The new value for operation
   * @param professor The new value for professor
   */
  public ProfessorEvent(java.lang.CharSequence operation, com.courseselection.kafkatypes.Professor professor) {
    this.operation = operation;
    this.professor = professor;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return operation;
    case 1: return professor;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: operation = (java.lang.CharSequence)value$; break;
    case 1: professor = (com.courseselection.kafkatypes.Professor)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'operation' field.
   * @return The value of the 'operation' field.
   */
  public java.lang.CharSequence getOperation() {
    return operation;
  }


  /**
   * Sets the value of the 'operation' field.
   * @param value the value to set.
   */
  public void setOperation(java.lang.CharSequence value) {
    this.operation = value;
  }

  /**
   * Gets the value of the 'professor' field.
   * @return The value of the 'professor' field.
   */
  public com.courseselection.kafkatypes.Professor getProfessor() {
    return professor;
  }


  /**
   * Sets the value of the 'professor' field.
   * @param value the value to set.
   */
  public void setProfessor(com.courseselection.kafkatypes.Professor value) {
    this.professor = value;
  }

  /**
   * Creates a new ProfessorEvent RecordBuilder.
   * @return A new ProfessorEvent RecordBuilder
   */
  public static com.courseselection.kafkatypes.ProfessorEvent.Builder newBuilder() {
    return new com.courseselection.kafkatypes.ProfessorEvent.Builder();
  }

  /**
   * Creates a new ProfessorEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ProfessorEvent RecordBuilder
   */
  public static com.courseselection.kafkatypes.ProfessorEvent.Builder newBuilder(com.courseselection.kafkatypes.ProfessorEvent.Builder other) {
    if (other == null) {
      return new com.courseselection.kafkatypes.ProfessorEvent.Builder();
    } else {
      return new com.courseselection.kafkatypes.ProfessorEvent.Builder(other);
    }
  }

  /**
   * Creates a new ProfessorEvent RecordBuilder by copying an existing ProfessorEvent instance.
   * @param other The existing instance to copy.
   * @return A new ProfessorEvent RecordBuilder
   */
  public static com.courseselection.kafkatypes.ProfessorEvent.Builder newBuilder(com.courseselection.kafkatypes.ProfessorEvent other) {
    if (other == null) {
      return new com.courseselection.kafkatypes.ProfessorEvent.Builder();
    } else {
      return new com.courseselection.kafkatypes.ProfessorEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for ProfessorEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ProfessorEvent>
    implements org.apache.avro.data.RecordBuilder<ProfessorEvent> {

    private java.lang.CharSequence operation;
    private com.courseselection.kafkatypes.Professor professor;
    private com.courseselection.kafkatypes.Professor.Builder professorBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.courseselection.kafkatypes.ProfessorEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.operation)) {
        this.operation = data().deepCopy(fields()[0].schema(), other.operation);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.professor)) {
        this.professor = data().deepCopy(fields()[1].schema(), other.professor);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasProfessorBuilder()) {
        this.professorBuilder = com.courseselection.kafkatypes.Professor.newBuilder(other.getProfessorBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing ProfessorEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.courseselection.kafkatypes.ProfessorEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.operation)) {
        this.operation = data().deepCopy(fields()[0].schema(), other.operation);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.professor)) {
        this.professor = data().deepCopy(fields()[1].schema(), other.professor);
        fieldSetFlags()[1] = true;
      }
      this.professorBuilder = null;
    }

    /**
      * Gets the value of the 'operation' field.
      * @return The value.
      */
    public java.lang.CharSequence getOperation() {
      return operation;
    }


    /**
      * Sets the value of the 'operation' field.
      * @param value The value of 'operation'.
      * @return This builder.
      */
    public com.courseselection.kafkatypes.ProfessorEvent.Builder setOperation(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.operation = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'operation' field has been set.
      * @return True if the 'operation' field has been set, false otherwise.
      */
    public boolean hasOperation() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'operation' field.
      * @return This builder.
      */
    public com.courseselection.kafkatypes.ProfessorEvent.Builder clearOperation() {
      operation = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'professor' field.
      * @return The value.
      */
    public com.courseselection.kafkatypes.Professor getProfessor() {
      return professor;
    }


    /**
      * Sets the value of the 'professor' field.
      * @param value The value of 'professor'.
      * @return This builder.
      */
    public com.courseselection.kafkatypes.ProfessorEvent.Builder setProfessor(com.courseselection.kafkatypes.Professor value) {
      validate(fields()[1], value);
      this.professorBuilder = null;
      this.professor = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'professor' field has been set.
      * @return True if the 'professor' field has been set, false otherwise.
      */
    public boolean hasProfessor() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'professor' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.courseselection.kafkatypes.Professor.Builder getProfessorBuilder() {
      if (professorBuilder == null) {
        if (hasProfessor()) {
          setProfessorBuilder(com.courseselection.kafkatypes.Professor.newBuilder(professor));
        } else {
          setProfessorBuilder(com.courseselection.kafkatypes.Professor.newBuilder());
        }
      }
      return professorBuilder;
    }

    /**
     * Sets the Builder instance for the 'professor' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.courseselection.kafkatypes.ProfessorEvent.Builder setProfessorBuilder(com.courseselection.kafkatypes.Professor.Builder value) {
      clearProfessor();
      professorBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'professor' field has an active Builder instance
     * @return True if the 'professor' field has an active Builder instance
     */
    public boolean hasProfessorBuilder() {
      return professorBuilder != null;
    }

    /**
      * Clears the value of the 'professor' field.
      * @return This builder.
      */
    public com.courseselection.kafkatypes.ProfessorEvent.Builder clearProfessor() {
      professor = null;
      professorBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ProfessorEvent build() {
      try {
        ProfessorEvent record = new ProfessorEvent();
        record.operation = fieldSetFlags()[0] ? this.operation : (java.lang.CharSequence) defaultValue(fields()[0]);
        if (professorBuilder != null) {
          try {
            record.professor = this.professorBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("professor"));
            throw e;
          }
        } else {
          record.professor = fieldSetFlags()[1] ? this.professor : (com.courseselection.kafkatypes.Professor) defaultValue(fields()[1]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ProfessorEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<ProfessorEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ProfessorEvent>
    READER$ = (org.apache.avro.io.DatumReader<ProfessorEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.operation);

    if (this.professor == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      this.professor.customEncode(out);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.operation = in.readString(this.operation instanceof Utf8 ? (Utf8)this.operation : null);

      if (in.readIndex() != 0) {
        in.readNull();
        this.professor = null;
      } else {
        if (this.professor == null) {
          this.professor = new com.courseselection.kafkatypes.Professor();
        }
        this.professor.customDecode(in);
      }

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.operation = in.readString(this.operation instanceof Utf8 ? (Utf8)this.operation : null);
          break;

        case 1:
          if (in.readIndex() != 0) {
            in.readNull();
            this.professor = null;
          } else {
            if (this.professor == null) {
              this.professor = new com.courseselection.kafkatypes.Professor();
            }
            this.professor.customDecode(in);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










